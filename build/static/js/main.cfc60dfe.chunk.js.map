{"version":3,"sources":["logo.svg","components/Reset.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","URLImage","props","useImage","url","image","x","y","scaleX","scaleY","draggable","dragBoundFunc","Main","useContext","UserCount","useState","img_data","setImgData","localized_data","setLocalizedData","data_ia_loaded","setDataIsLoaded","ldata_ia_loaded","setLDataIsLoaded","ldata_is_selected","setLDataIsSelected","zoom_rate","setZoomRate","img_pos_x","setImgPosX","getSpectrumImg","request","get","end","err","data","console","error","body","zoomStage","e","evt","preventDefault","next_zoom_rate","deltaY","moveXImage","pos","type","next_pos_x","next_pos_y","className","onClick","post","send","res","log","width","window","innerWidth","height","onWheel","fill","specgram","img_path","music","slice","map","ld","parseFloat","t_max","stroke","strokeWidth","opacity","parseInt","onDragStart","onDragEnd","temp","idx","String","target","updateLocalizedPos","onDblClick","d","localized_data_area","createContext","App","count","setCount","useEffect","Provider","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfc60dfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport { Stage, Layer, Star, Text } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\n\r\nfunction sendData() {\r\n    request\r\n        .post(\"/api/sendData\")\r\n        .send({data: -999})\r\n        .end((err, data) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n            console.log(data.body);\r\n            return;\r\n    });\r\n}\r\n\r\nconst Reset = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n\r\n  return (\r\n    <div className=\"Reset\">\r\n      <div className=\"Window1\">\r\n        <button onClick={() => sendData()}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reset;\r\n","import React, { useState, useEffect, createContext, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\nimport Reset from './Reset';\r\n\r\n\r\nconst URLImage = (props) => {\r\n  const [image] = useImage(props.url);\r\n  return <Image\r\n    image={image}\r\n    x={props.x}\r\n    y={props.y}\r\n    scaleX={props.scaleX}\r\n    scaleY={props.scaleY}\r\n    draggable={props.draggable}\r\n    dragBoundFunc={props.dragBoundFunc}\r\n  />;\r\n};\r\n\r\n\r\nconst Main = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n  const [img_data, setImgData] = useState(null);\r\n  const [localized_data, setLocalizedData] = useState([]);\r\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\r\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\r\n  const [ldata_is_selected, setLDataIsSelected] = useState(-1);\r\n  const [zoom_rate, setZoomRate] = useState(1.0);\r\n  const [img_pos_x, setImgPosX] = useState(10.0)\r\n\r\n  const getSpectrumImg = () => {\r\n    request\r\n      .get(\"/api/getSpectrumImg\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setImgData(data.body);\r\n          setDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const getLocalizedData = () => {\r\n    request\r\n      .get(\"/api/getLocalizedData\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setLocalizedData(data.body.localized_data);\r\n          setLDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const sendAnnotationData = () => {\r\n    request\r\n    .post(\"/api/sendAnnotationData\")\r\n    .send(localized_data)\r\n    .end((err, res) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n        console.log(res.body.res);\r\n        return;\r\n    });\r\n  };\r\n\r\n  const updateLocalizedPos = (e) => {\r\n    const temp = localized_data.slice(0);\r\n    const idx = ldata_is_selected + 1;\r\n    \r\n    temp[idx][2] = String(((e.target.x() - img_pos_x) * (img_data.music.t_max / 992)) / zoom_rate);\r\n    temp[idx][4] = String((-((e.target.y() + 10-20) / (740 / 2))) * 360 + 180);\r\n    setLocalizedData(temp);\r\n  };\r\n\r\n  const zoomStage = (e) => {\r\n    e.evt.preventDefault();\r\n    const next_zoom_rate = zoom_rate + e.evt.deltaY * -0.001;\r\n    if (next_zoom_rate < 1.0) {\r\n      next_zoom_rate = 1.0;\r\n    }\r\n    setZoomRate(next_zoom_rate);\r\n  };\r\n\r\n  const moveXImage = (pos, type) => {\r\n    const next_pos_x = pos.x; // pos.x < 10.0 ? 10.0 : pos.x;\r\n    const next_pos_y = type === \"music\" ? 20.0: 0.0;\r\n\r\n    setImgPosX(next_pos_x);\r\n    return {\"x\": next_pos_x, \"y\": next_pos_y};\r\n  };\r\n\r\n  const playWav = (idx) => {\r\n    // ローカルファイル再生不可能問題のため未実装\r\n    console.log(\"play sep_\" + String(idx) + \".vaw.\");\r\n  };\r\n\r\n  const reset = () => {\r\n    setDataIsLoaded(false);\r\n    setLDataIsLoaded(false);\r\n    setLDataIsSelected(-1); \r\n    setZoomRate(1.0);\r\n    setImgPosX(10.0);\r\n\r\n  };\r\n\r\n  const button_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            Load Spectrum\r\n          </button>\r\n          <button onClick={() => getLocalizedData()}>\r\n            Load Localized Sata\r\n          </button>\r\n          <button onClick={() => sendAnnotationData()}>\r\n            Save Annotation Sata\r\n          </button>\r\n          <button onClick={() => reset()}>\r\n            Resrt\r\n          </button>\r\n      </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const stage_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"stage_area\">\r\n          <div className=\"Stage1\">\r\n            <p>Specgram</p>\r\n            <Stage width={window.innerWidth} height={740/2}>\r\n              <Layer\r\n                onWheel={e => zoomStage(e)}\r\n              >\r\n                <Rect\r\n                  x={0.0}\r\n                  y={0.0}\r\n                  width={window.innerWidth}\r\n                  height={740/2}\r\n                  fill=\"LightGray\"\r\n                />\r\n                <URLImage\r\n                  //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/specgram.png\"\r\n                  url={img_data.specgram.img_path}\r\n                  x={img_pos_x}\r\n                  y={0.0}\r\n                  scaleX={zoom_rate}\r\n                  scaleY={0.5}\r\n                  draggable={true}\r\n                  dragBoundFunc={(pos) => moveXImage(pos, \"specgram\")}\r\n                />\r\n              </Layer>\r\n            </Stage>\r\n          </div>\r\n          <div className=\"Stage2\">\r\n          <p>Music</p>\r\n          <Stage width={window.innerWidth} height={(740/2) + 40}>\r\n            <Layer\r\n              onWheel={e => zoomStage(e)}\r\n            >\r\n              <Rect\r\n                  x={0.0}\r\n                  y={0.0}\r\n                  width={window.innerWidth}\r\n                  height={(740/2) + 40}\r\n                  fill=\"LightGray\"\r\n              />\r\n              <URLImage\r\n                //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/music.png\"\r\n                url={img_data.music.img_path}\r\n                x={img_pos_x}\r\n                y={20}\r\n                scaleX={zoom_rate}\r\n                scaleY={0.5}\r\n                draggable={true}\r\n                dragBoundFunc={(pos) => moveXImage(pos, \"music\")}\r\n              />\r\n              {localized_data.slice(1).map(ld => {\r\n                return (\r\n                  <Rect\r\n                    x={(((parseFloat(ld[2]) / img_data.music.t_max) * 992) * zoom_rate) + img_pos_x}\r\n                    y={((-parseFloat(ld[4]) + 180) / 360) * (740 / 2) - 10 + 20}\r\n                    draggable={true}\r\n                    width={((parseFloat(ld[3]) / img_data.music.t_max) * 992) * zoom_rate}\r\n                    height={20}\r\n                    fill=\"red\"\r\n                    stroke='black'\r\n                    strokeWidth={2}\r\n                    opacity={0.6}\r\n                    onClick={() => setLDataIsSelected(parseInt(ld[0]))}\r\n                    onDragStart={() => setLDataIsSelected(parseInt(ld[0]))}\r\n                    onDragEnd={e =>updateLocalizedPos(e)}\r\n                    onDblClick={() => playWav(parseInt(ld[0]))}\r\n                  />\r\n                )})\r\n              }\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n      );\r\n    } else {\r\n      return <p>Please load spectrum data.</p>;\r\n    }\r\n  };\r\n\r\n  const localized_data_area = () => {\r\n    if (ldata_ia_loaded && ldata_is_selected >= 0) {\r\n      return (\r\n        <dev className=\"localized_info\">\r\n          <p>Localized Information</p>\r\n          {localized_data.slice(1)[ldata_is_selected].map(d => {\r\n            return <ul>{d}</ul>\r\n            })\r\n          }\r\n        </dev>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {button_area()}\r\n      {stage_area()}\r\n      {localized_data_area()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect, createContext } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport request from \"superagent\";\nimport Main from \"./components/Main\";\nimport Reset from \"./components/Reset\";\n\nexport const UserCount = createContext();\n\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    \n  }, []);\n\n  const getData = () => {\n    request\n      .get(\"/api/getData\")\n      .end((err, data) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n          //setCount(data.body.data);\n          return;\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      {/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload. \n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      */}\n      <p>Annotation</p>\n      <UserCount.Provider value={[count, setCount]}>\n        <Main />\n      </UserCount.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}