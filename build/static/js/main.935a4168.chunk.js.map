{"version":3,"sources":["logo.svg","components/Reset.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","URLImage","props","useImage","url","image","x","y","scaleX","scaleY","draggable","dragBoundFunc","LocalizedData","shapeRef","React","useRef","trRef","useEffect","isSelected","current","nodes","getLayer","batchDraw","Fragment","width","height","fill","stroke","strokeWidth","opacity","onClick","onSelect","onTap","ref","onDragEnd","e","onChange","target","onDblClick","onTransformEnd","node","Math","max","boundBoxFunc","oldBox","newBox","Main","useContext","UserCount","useState","img_data","setImgData","localized_data","setLocalizedData","data_ia_loaded","setDataIsLoaded","ldata_ia_loaded","setLDataIsLoaded","ldata_is_selected","setLDataIsSelected","zoom_rate","setZoomRate","img_pos_x","setImgPosX","current_img_num","setCurrentImgNum","relative","setRelative","getSpectrumImg","request","get","end","err","data","console","error","body","log","getLocalizedData","sendAnnotationData","post","send","filter","ld","i","res","updateLocalizedInfo","temp","slice","idx","String","music","t_max","dt_num","changeZoomRate","zr","specgram","moveXImage","pos","type","next_pos_x","next_pos_y","changeImageArea","next_img_num","deleteLocalizedData","reset","className","sp_num","checked","window","innerWidth","sp_img_paths","parseFloat","map","key","parseInt","Audio","sound_source_paths","play","attr","d","localized_data_area","createContext","App","count","setCount","Provider","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.935a4168.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport { Stage, Layer, Star, Text } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\n\r\nfunction sendData() {\r\n    request\r\n        .post(\"/api/sendData\")\r\n        .send({data: -999})\r\n        .end((err, data) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n            console.log(data.body);\r\n            return;\r\n    });\r\n}\r\n\r\nconst Reset = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n\r\n  return (\r\n    <div className=\"Reset\">\r\n      <div className=\"Window1\">\r\n        <button onClick={() => sendData()}>\r\n          Click me\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reset;\r\n","import React, { useState, useEffect, createContext, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\nimport { Stage, Layer, Star, Rect, Text, Image, Transformer } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\nimport Reset from './Reset';\r\n//import useUndo from 'use-undo';\r\n\r\n\r\nconst URLImage = (props) => {\r\n  const [image] = useImage(props.url);\r\n  return <Image\r\n    image={image}\r\n    x={props.x}\r\n    y={props.y}\r\n    scaleX={props.scaleX}\r\n    scaleY={props.scaleY}\r\n    draggable={props.draggable}\r\n    dragBoundFunc={props.dragBoundFunc}\r\n  />;\r\n};\r\n\r\n\r\nconst LocalizedData = (props) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    if (props.isSelected) {\r\n      // we need to attach transformer manually\r\n      trRef.current.nodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [props.isSelected]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        x={props.x}\r\n        y={props.y}\r\n        width={props.width}\r\n        height={props.height}\r\n        fill={props.fill}\r\n        stroke={props.stroke}\r\n        strokeWidth={props.strokeWidth}\r\n        opacity={props.opacity}\r\n        onClick={props.onSelect}\r\n        onTap={props.onSelect}\r\n        ref={shapeRef}\r\n        draggable={props.draggable}\r\n        onDragEnd={(e) => {props.onChange(e.target.x(), e.target.y(), e.target.width(), e.target.height())}}\r\n        onDblClick={props.onDblClick}\r\n        onTransformEnd={(e) => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          props.onChange(node.x(), node.y(), Math.max(5, node.width() * scaleX), node.height());\r\n        }}\r\n      />\r\n      {props.isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.width < 5 || newBox.y !== oldBox.y || newBox.height !== oldBox.height) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\nconst Main = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n  const [img_data, setImgData] = useState(null);\r\n  const [localized_data, setLocalizedData] = useState([]);\r\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\r\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\r\n  const [ldata_is_selected, setLDataIsSelected] = useState(-1);\r\n  const [zoom_rate, setZoomRate] = useState(1.0);\r\n  const [img_pos_x, setImgPosX] = useState(10.0)\r\n  const [current_img_num, setCurrentImgNum] = useState(0);\r\n  const [relative, setRelative] = useState(false);\r\n\r\n  const getSpectrumImg = () => {\r\n    request\r\n      .get(\"/api/getSpectrumImg\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setImgData(data.body);\r\n          setDataIsLoaded(true);\r\n          console.log(data.body);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const getLocalizedData = () => {\r\n    request\r\n      .get(\"/api/getLocalizedData\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setLocalizedData(data.body.localized_data);\r\n          setLDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const sendAnnotationData = () => {\r\n    request\r\n    .post(\"/api/sendAnnotationData\")\r\n    .send(localized_data.filter((ld, i) => i === 0 || ld[0] >= 0))\r\n    .end((err, res) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n        console.log(res.body.res);\r\n        return;\r\n    });\r\n  };\r\n\r\n  const updateLocalizedInfo = (x, y, width, height) => {\r\n    const temp = localized_data.slice(0);\r\n    const idx = ldata_is_selected + 1;\r\n    \r\n    temp[idx][2] = String(relative ?\r\n                            ((((x - img_pos_x) / zoom_rate)) * (img_data.music.t_max / 992)):\r\n                            ((((x - img_pos_x) / zoom_rate) + current_img_num * img_data.music.dt_num) * (img_data.music.t_max / 992)));\r\n    temp[idx][3] = String((width / zoom_rate) * (img_data.music.t_max / 992));\r\n    temp[idx][4] = String((-((y + 10-20) / (740 / 2))) * 360 + 180);\r\n    setLocalizedData(temp);\r\n  };\r\n\r\n  const zoomStage = (e) => {\r\n    e.evt.preventDefault();\r\n    var next_zoom_rate = zoom_rate + e.evt.deltaY * -0.001;\r\n    if (next_zoom_rate < 1.0) {\r\n      next_zoom_rate = 1.0;\r\n    }\r\n    setZoomRate(next_zoom_rate);\r\n  };\r\n\r\n  const changeZoomRate = (zr) => {\r\n    \r\n    setImgPosX(img_pos_x -  (((zr - zoom_rate) * img_data.specgram.t_max) / 2));\r\n    setZoomRate(zr);\r\n  };\r\n\r\n  const moveXImage = (pos, type) => {\r\n    const next_pos_x = pos.x; // pos.x < 10.0 ? 10.0 : pos.x;\r\n    const next_pos_y = type === \"music\" ? 20.0: 0.0;\r\n\r\n    setImgPosX(relative? next_pos_x - (current_img_num * img_data.music.dt_num) * zoom_rate: next_pos_x);\r\n    return {\"x\": next_pos_x, \"y\": next_pos_y};\r\n  };\r\n\r\n  const changeImageArea = (next_img_num) => {\r\n    setCurrentImgNum(next_img_num);\r\n  };\r\n\r\n  const playWav = (idx) => {\r\n    const music = new Audio(img_data.sound_source_paths[idx]);\r\n    music.play();\r\n  };\r\n\r\n  const deleteLocalizedData = () => {\r\n    const temp = localized_data.slice(0);\r\n    const idx = ldata_is_selected + 1;\r\n\r\n    temp[idx][0] = -1;\r\n    setLocalizedData(temp);\r\n    setLDataIsSelected(-1);\r\n  };\r\n\r\n  const reset = () => {\r\n    setDataIsLoaded(false);\r\n    setLDataIsLoaded(false);\r\n    setLDataIsSelected(-1); \r\n    setZoomRate(1.0);\r\n    setImgPosX(10.0);\r\n    setCurrentImgNum(0);\r\n    setRelative(false);\r\n  };\r\n\r\n  const op_button_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"op_button_area1\">\r\n            <button onClick={getSpectrumImg}>\r\n              Load Spectrum\r\n            </button>\r\n            <button onClick={getLocalizedData}>\r\n              Load Localized Sata\r\n            </button>\r\n            <button onClick={sendAnnotationData}>\r\n              Save Annotation Sata\r\n            </button>\r\n            <button onClick={reset}>\r\n              Resrt\r\n            </button>\r\n        </div>\r\n        <div className=\"op_button_area2\">\r\n          <button onClick={() => changeZoomRate(1.0)}>\r\n              x1\r\n          </button>\r\n          <button onClick={() => changeZoomRate(2.0)}>\r\n              x2\r\n          </button>\r\n          <button onClick={() => changeZoomRate(4.0)}>\r\n              x4\r\n          </button>\r\n          <button onClick={() => changeZoomRate(8.0)}>\r\n              x8\r\n          </button>\r\n          <button onClick={() => changeZoomRate(16.0)}>\r\n              x16\r\n          </button>\r\n          <button onClick={() => changeImageArea(current_img_num - 1 >= 0 ? current_img_num - 1: 0)}>\r\n              --\r\n          </button>\r\n          <button onClick={() => changeImageArea(current_img_num + 1 < img_data.music.sp_num ? current_img_num + 1: img_data.music.sp_num)}>\r\n              ++\r\n          </button>\r\n          <input type=\"checkbox\" checked={relative} onChange={() => {setRelative(!relative)}}/>\r\n            relative\r\n        </div>\r\n      </React.Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"button_area1\">\r\n          <button onClick={getSpectrumImg}>\r\n            Load Spectrum\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const stage_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"Stage1\">\r\n            <p>Specgram x{zoom_rate}, {current_img_num}</p>\r\n            <Stage width={window.innerWidth} height={740/2}>\r\n              <Layer\r\n                //onWheel={e => zoomStage(e)}\r\n              >\r\n                <Rect\r\n                  x={0.0}\r\n                  y={0.0}\r\n                  width={window.innerWidth}\r\n                  height={740/2}\r\n                  fill=\"LightGray\"\r\n                />\r\n                <URLImage\r\n                  url={img_data.specgram.sp_img_paths[current_img_num]}\r\n                  x={relative ? img_pos_x + (current_img_num * img_data.music.dt_num) * zoom_rate: img_pos_x}\r\n                  y={0.0}\r\n                  scaleX={zoom_rate}\r\n                  scaleY={0.5}\r\n                  draggable={true}\r\n                  dragBoundFunc={(pos) => moveXImage(pos, \"specgram\")}\r\n                />\r\n              </Layer>\r\n            </Stage>\r\n          </div>\r\n          <div className=\"Stage2\">\r\n          <p>Music</p>\r\n          <Stage width={window.innerWidth} height={(740/2) + 40}>\r\n            <Layer\r\n              //onWheel={e => zoomStage(e)}\r\n            >\r\n              <Rect\r\n                  x={0.0}\r\n                  y={0.0}\r\n                  width={window.innerWidth}\r\n                  height={(740/2) + 40}\r\n                  fill=\"LightGray\"\r\n              />\r\n              <URLImage\r\n                url={img_data.music.sp_img_paths[current_img_num]}\r\n                x={relative ? img_pos_x + (current_img_num * img_data.music.dt_num) * zoom_rate: img_pos_x}\r\n                y={20}\r\n                scaleX={zoom_rate}\r\n                scaleY={0.5}\r\n                draggable={true}\r\n                dragBoundFunc={(pos) => moveXImage(pos, \"music\")}\r\n              />\r\n              {localized_data.slice(1).filter(ld => ld[0] !== -1 && (parseFloat(ld[2]) >= (img_data.music.t_max / 992) * current_img_num * img_data.music.dt_num\r\n                                                                     && parseFloat(ld[2]) < (img_data.music.t_max / 992) * (current_img_num + 2) * img_data.music.dt_num)).map(ld => {\r\n                return (\r\n\r\n                  <LocalizedData\r\n                    key={\"ss\" + ld[0]}\r\n                    x={relative ?\r\n                        (((parseFloat(ld[2]) / img_data.music.t_max) * 992) * zoom_rate) + img_pos_x:\r\n                        (((parseFloat(ld[2]) / img_data.music.t_max) * 992 - current_img_num * img_data.music.dt_num) * zoom_rate) + img_pos_x}\r\n                    y={((-parseFloat(ld[4]) + 180) / 360) * (740 / 2) - 10 + 20}\r\n                    draggable={parseInt(ld[0]) === ldata_is_selected}\r\n                    width={((parseFloat(ld[3]) / img_data.music.t_max) * 992) * zoom_rate}\r\n                    height={20}\r\n                    fill=\"red\"\r\n                    stroke='black'\r\n                    strokeWidth={2}\r\n                    opacity={0.6}\r\n                    isSelected={parseInt(ld[0]) === ldata_is_selected}\r\n                    onSelect={() => setLDataIsSelected(parseInt(ld[0]))}\r\n                    onChange={updateLocalizedInfo}\r\n                    onDblClick={() => playWav(parseInt(ld[0]))}\r\n                  />\r\n                )})\r\n              }\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </React.Fragment>\r\n      );\r\n    } else {\r\n      return <p>Please load spectrum data.</p>;\r\n    }\r\n  };\r\n\r\n  const localized_data_area = () => {\r\n    if (ldata_ia_loaded && ldata_is_selected >= 0) {\r\n      const attr = [\"iid\", \"sid\", \"time\", \"duration\", \"azimuth\", \"species\"];\r\n      return (\r\n        <React.Fragment>\r\n          <dev className=\"localized_info\">\r\n            <p>Localized Information</p>\r\n            {localized_data.slice(1)[ldata_is_selected].map((d, i) => {\r\n              return <ul>{attr[i]}: {d}</ul>\r\n              })\r\n            }\r\n          </dev>\r\n          <button onClick={deleteLocalizedData}>\r\n              Delete\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {op_button_area()}\r\n      {stage_area()}\r\n      {localized_data_area()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect, createContext } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport request from \"superagent\";\nimport Main from \"./components/Main\";\nimport Reset from \"./components/Reset\";\n\nexport const UserCount = createContext();\n\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    \n  }, []);\n\n  const getData = () => {\n    request\n      .get(\"/api/getData\")\n      .end((err, data) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n          //setCount(data.body.data);\n          return;\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      {/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload. \n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      */}\n      <p>Annotation</p>\n      <UserCount.Provider value={[count, setCount]}>\n        <Main />\n      </UserCount.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}