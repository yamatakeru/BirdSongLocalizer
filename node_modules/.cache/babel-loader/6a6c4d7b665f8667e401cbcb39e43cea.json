{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yamat\\\\Workspace\\\\hark_bird_app\\\\src\\\\components\\\\Main.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Konva from 'konva';\nimport useImage from 'use-image';\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\nimport request from \"superagent\";\nimport { UserCount } from '../App';\nimport Reset from './Reset';\n\nconst URLImage = props => {\n  const [image] = useImage(props.url);\n  console.log(image);\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    scaleX: props.scaleX,\n    scaleY: props.scaleY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }\n  });\n};\n\nconst Main = () => {\n  const [count, setCount] = useContext(UserCount);\n  const [img_data, setImgData] = useState(null);\n  const [localized_data, setLocalizedData] = useState([]);\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\n\n  const getSpectrumImg = () => {\n    request.get(\"/api/getSpectrumImg\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      setImgData(data.body);\n      console.log(img_data);\n      setDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const getLocalizedData = () => {\n    request.get(\"/api/getLocalizedData\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(data.body.localized_data.slice(1));\n      setLocalizedData(data.body.localized_data);\n      setLDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const sendData = () => {\n    request.get(\"/api/sendData\").query({\n      data: -999\n    }).end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(data.body);\n    });\n  };\n\n  const button_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getLocalizedData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }, \"load Localized data\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setDataIsLoaded(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, \"resrt data\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"));\n    }\n  };\n\n  const stage_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stage_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, \"Specgram\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Rect, {\n        x: 0,\n        y: 100,\n        width: 200,\n        heigh: 50,\n        fill: \"red\",\n        stroke: \"black\",\n        strokeWidth: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, \"Music\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        text: \"music\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Rect, {\n        x: 0,\n        y: 0,\n        width: 2000,\n        heigh: 5000,\n        fill: \"red\",\n        stroke: \"black\",\n        strokeWidth: 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      })))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 14\n        }\n      }, \" Please date load. \");\n    }\n  };\n\n  const localized_rects = () => {\n    const squares = [];\n\n    if (true) {\n      squares.push( /*#__PURE__*/React.createElement(Rect, {\n        x: 150,\n        y: 40,\n        width: 100,\n        heigh: 50,\n        fill: \"#00D2FF\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return {\n      squares\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, button_area(), stage_area());\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/yamat/Workspace/hark_bird_app/src/components/Main.js"],"names":["React","useState","useEffect","useContext","Konva","useImage","Stage","Layer","Star","Rect","Text","Image","request","UserCount","Reset","URLImage","props","image","url","console","log","scaleX","scaleY","Main","count","setCount","img_data","setImgData","localized_data","setLocalizedData","data_ia_loaded","setDataIsLoaded","ldata_ia_loaded","setLDataIsLoaded","getSpectrumImg","get","end","err","data","error","body","getLocalizedData","slice","sendData","query","button_area","stage_area","window","innerWidth","innerHeight","localized_rects","squares","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\nimport Reset from './Reset';\r\n\r\n\r\nconst URLImage = (props) => {\r\n  const [image] = useImage(props.url);\r\n  console.log(image);\r\n  return <Image\r\n    image={image}\r\n    scaleX={props.scaleX}\r\n    scaleY={props.scaleY}\r\n  />;\r\n};\r\n\r\nconst Main = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n  const [img_data, setImgData] = useState(null);\r\n  const [localized_data, setLocalizedData] = useState([]);\r\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\r\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\r\n\r\n  const getSpectrumImg = () => {\r\n    request\r\n      .get(\"/api/getSpectrumImg\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setImgData(data.body);\r\n          console.log(img_data);\r\n          setDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const getLocalizedData = () => {\r\n    request\r\n      .get(\"/api/getLocalizedData\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          console.log(data.body.localized_data.slice(1));\r\n          setLocalizedData(data.body.localized_data);\r\n          setLDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const sendData = () => {\r\n    request\r\n    .get(\"/api/sendData\")\r\n    .query({data: -999})\r\n    .end((err, data) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n        console.log(data.body);\r\n    });\r\n  };\r\n\r\n  const button_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n          <button onClick={() => getLocalizedData()}>\r\n            load Localized data\r\n          </button>\r\n          <button onClick={() => setDataIsLoaded(false)}>\r\n            resrt data\r\n        </button>\r\n      </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const stage_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"stage_area\">\r\n          <div className=\"Stage1\">\r\n            <p>Specgram</p>\r\n            <Stage width={window.innerWidth} height={window.innerHeight/3}>\r\n              <Layer>\r\n              <Rect\r\n                x={0}\r\n                y={100}\r\n                width={200}\r\n                heigh={50}\r\n                fill=\"red\"\r\n                stroke='black'\r\n                strokeWidth={4}\r\n              />\r\n              </Layer>\r\n            </Stage>\r\n          </div>\r\n          <div className=\"Stage2\">\r\n          <p>Music</p>\r\n          <Stage width={window.innerWidth} height={window.innerHeight/3}>\r\n            <Layer>\r\n\r\n              <Text text=\"music\" />\r\n              <Rect\r\n                x={0}\r\n                y={0}\r\n                width={2000}\r\n                heigh={5000}\r\n                fill=\"red\"\r\n                stroke='black'\r\n                strokeWidth={4}\r\n              />\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n      );\r\n    } else {\r\n      return <p> Please date load. </p>;\r\n    }\r\n  };\r\n\r\n  const localized_rects = () => {\r\n    const squares = []\r\n    if (true) {\r\n      squares.push(\r\n        <Rect\r\n          x={150}\r\n          y={40}\r\n          width={100}\r\n          heigh={50}\r\n          fill=\"#00D2FF\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return ({squares});\r\n  }\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {button_area()}\r\n      {stage_area()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}