{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yamat\\\\Workspace\\\\hark_bird_app\\\\src\\\\components\\\\Main.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Konva from 'konva';\nimport useImage from 'use-image';\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\nimport request from \"superagent\";\nimport { UserCount } from '../App';\nimport Reset from './Reset';\n\nfunction generateShapes() {\n  return [...Array(10)].map((_, i) => ({\n    id: i.toString(),\n    x: Math.random() * window.innerWidth,\n    y: Math.random() * window.innerHeight,\n    rotation: Math.random() * 180,\n    isDragging: false\n  }));\n}\n\nconst URLImage = props => {\n  const [image] = useImage(props.url);\n  console.log(image);\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    scaleX: props.scaleX,\n    scaleY: props.scaleY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }\n  });\n};\n\nconst Main = () => {\n  const [count, setCount] = useContext(UserCount);\n  const [img_data, setImgData] = useState(null);\n  const [localized_data, setLocalizedData] = useState([]);\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\n\n  const getSpectrumImg = () => {\n    request.get(\"/api/getSpectrumImg\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      setImgData(data.body);\n      console.log(img_data);\n      setDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const getLocalizedData = () => {\n    request.get(\"/api/getLocalizedData\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(data.body.localized_data.slice(1));\n      setLocalizedData(data.body.localized_data);\n      setLDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const sendData = () => {\n    request.get(\"/api/sendData\").query({\n      data: -999\n    }).end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(data.body);\n    });\n  };\n\n  const button_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getLocalizedData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \"load Localized data\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setDataIsLoaded(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, \"resrt data\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"));\n    }\n  };\n\n  const [stars, setStars] = React.useState(INITIAL_STATE);\n\n  const handleDragStart = e => {\n    const id = e.target.id();\n    setStars(stars.map(star => {\n      return { ...star,\n        isDragging: star.id === id\n      };\n    }));\n  };\n\n  const handleDragEnd = e => {\n    setStars(stars.map(star => {\n      return { ...star,\n        isDragging: false\n      };\n    }));\n  };\n\n  const stage_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stage_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, \"Specgram\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(URLImage, {\n        url: img_data.specgram.img_path,\n        scaleX: 1,\n        scaleY: 0.5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Text, {\n        text: \"specgram\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, \"Music\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(URLImage, {\n        url: img_data.music.img_path,\n        scaleX: 1,\n        scaleY: 0.5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Text, {\n        text: \"music\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Star, {\n        key: star.id,\n        id: star.id,\n        x: star.x,\n        y: star.y,\n        numPoints: 5,\n        innerRadius: 20,\n        outerRadius: 40,\n        fill: \"#89b717\",\n        opacity: 0.8,\n        draggable: true,\n        rotation: star.rotation,\n        shadowColor: \"black\",\n        shadowBlur: 10,\n        shadowOpacity: 0.6,\n        shadowOffsetX: star.isDragging ? 10 : 5,\n        shadowOffsetY: star.isDragging ? 10 : 5,\n        scaleX: star.isDragging ? 1.2 : 1,\n        scaleY: star.isDragging ? 1.2 : 1,\n        onDragStart: handleDragStart,\n        onDragEnd: handleDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }\n      })))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 14\n        }\n      }, \" Please date load. \");\n    }\n  };\n\n  const localized_rects = () => {\n    const squares = [];\n\n    if (true) {\n      squares.push( /*#__PURE__*/React.createElement(Rect, {\n        x: 150,\n        y: 40,\n        width: 100,\n        heigh: 50,\n        fill: \"#00D2FF\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return {\n      squares\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, button_area(), stage_area());\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/yamat/Workspace/hark_bird_app/src/components/Main.js"],"names":["React","useState","useEffect","useContext","Konva","useImage","Stage","Layer","Star","Rect","Text","Image","request","UserCount","Reset","generateShapes","Array","map","_","i","id","toString","x","Math","random","window","innerWidth","y","innerHeight","rotation","isDragging","URLImage","props","image","url","console","log","scaleX","scaleY","Main","count","setCount","img_data","setImgData","localized_data","setLocalizedData","data_ia_loaded","setDataIsLoaded","ldata_ia_loaded","setLDataIsLoaded","getSpectrumImg","get","end","err","data","error","body","getLocalizedData","slice","sendData","query","button_area","stars","setStars","INITIAL_STATE","handleDragStart","e","target","star","handleDragEnd","stage_area","specgram","img_path","music","localized_rects","squares","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\nimport Reset from './Reset';\r\n\r\nfunction generateShapes() {\r\n  return [...Array(10)].map((_, i) => ({\r\n    id: i.toString(),\r\n    x: Math.random() * window.innerWidth,\r\n    y: Math.random() * window.innerHeight,\r\n    rotation: Math.random() * 180,\r\n    isDragging: false,\r\n  }));\r\n}\r\nconst URLImage = (props) => {\r\n  const [image] = useImage(props.url);\r\n  console.log(image);\r\n  return <Image\r\n    image={image}\r\n    scaleX={props.scaleX}\r\n    scaleY={props.scaleY}\r\n  />;\r\n};\r\n\r\nconst Main = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n  const [img_data, setImgData] = useState(null);\r\n  const [localized_data, setLocalizedData] = useState([]);\r\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\r\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\r\n\r\n  const getSpectrumImg = () => {\r\n    request\r\n      .get(\"/api/getSpectrumImg\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setImgData(data.body);\r\n          console.log(img_data);\r\n          setDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const getLocalizedData = () => {\r\n    request\r\n      .get(\"/api/getLocalizedData\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          console.log(data.body.localized_data.slice(1));\r\n          setLocalizedData(data.body.localized_data);\r\n          setLDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const sendData = () => {\r\n    request\r\n    .get(\"/api/sendData\")\r\n    .query({data: -999})\r\n    .end((err, data) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n        console.log(data.body);\r\n    });\r\n  };\r\n\r\n  const button_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n          <button onClick={() => getLocalizedData()}>\r\n            load Localized data\r\n          </button>\r\n          <button onClick={() => setDataIsLoaded(false)}>\r\n            resrt data\r\n        </button>\r\n      </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const [stars, setStars] = React.useState(INITIAL_STATE);\r\n\r\n  const handleDragStart = (e) => {\r\n    const id = e.target.id();\r\n    setStars(\r\n      stars.map((star) => {\r\n        return {\r\n          ...star,\r\n          isDragging: star.id === id,\r\n        };\r\n      })\r\n    );\r\n  };\r\n  const handleDragEnd = (e) => {\r\n    setStars(\r\n      stars.map((star) => {\r\n        return {\r\n          ...star,\r\n          isDragging: false,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const stage_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"stage_area\">\r\n          <div className=\"Stage1\">\r\n            <p>Specgram</p>\r\n            <Stage width={window.innerWidth} height={window.innerHeight/3}>\r\n              <Layer>\r\n                <URLImage\r\n                  url={img_data.specgram.img_path}\r\n                  scaleX={1}\r\n                  scaleY={0.5}\r\n                />\r\n                <Text text=\"specgram\" />\r\n              </Layer>\r\n            </Stage>\r\n          </div>\r\n          <div className=\"Stage2\">\r\n          <p>Music</p>\r\n          <Stage width={window.innerWidth} height={window.innerHeight/3}>\r\n            <Layer>\r\n              <URLImage\r\n                url={img_data.music.img_path}\r\n                scaleX={1}\r\n                scaleY={0.5}\r\n              />\r\n              <Text text=\"music\" />\r\n              <Star\r\n                key={star.id}\r\n                id={star.id}\r\n                x={star.x}\r\n                y={star.y}\r\n                numPoints={5}\r\n                innerRadius={20}\r\n                outerRadius={40}\r\n                fill=\"#89b717\"\r\n                opacity={0.8}\r\n                draggable\r\n                rotation={star.rotation}\r\n                shadowColor=\"black\"\r\n                shadowBlur={10}\r\n                shadowOpacity={0.6}\r\n                shadowOffsetX={star.isDragging ? 10 : 5}\r\n                shadowOffsetY={star.isDragging ? 10 : 5}\r\n                scaleX={star.isDragging ? 1.2 : 1}\r\n                scaleY={star.isDragging ? 1.2 : 1}\r\n                onDragStart={handleDragStart}\r\n                onDragEnd={handleDragEnd}\r\n              />\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n      );\r\n    } else {\r\n      return <p> Please date load. </p>;\r\n    }\r\n  };\r\n\r\n  const localized_rects = () => {\r\n    const squares = []\r\n    if (true) {\r\n      squares.push(\r\n        <Rect\r\n          x={150}\r\n          y={40}\r\n          width={100}\r\n          heigh={50}\r\n          fill=\"#00D2FF\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return ({squares});\r\n  }\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {button_area()}\r\n      {stage_area()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}