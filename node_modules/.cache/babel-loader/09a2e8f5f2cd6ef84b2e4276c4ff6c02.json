{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yamat\\\\Workspace\\\\hark_bird_app\\\\src\\\\components\\\\Main.js\";\nimport React, { useState, useEffect, createContext, useContext } from 'react';\nimport Konva from 'konva';\nimport useImage from 'use-image';\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\nimport request from \"superagent\";\nimport { UserCount } from '../App';\nimport Reset from './Reset';\n\nconst URLImage = props => {\n  const [image] = useImage(props.url);\n  return /*#__PURE__*/React.createElement(Image, {\n    image: image,\n    scaleX: props.scaleX,\n    scaleY: props.scaleY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n};\n\nconst Main = () => {\n  const [count, setCount] = useContext(UserCount);\n  const [img_data, setImgData] = useState(null);\n  const [localized_data, setLocalizedData] = useState([]);\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\n  const [ldata_is_selected, setLDataIsSelected] = useState(-1);\n\n  const getSpectrumImg = () => {\n    request.get(\"/api/getSpectrumImg\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      setImgData(data.body);\n      setDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const getLocalizedData = () => {\n    request.get(\"/api/getLocalizedData\").end((err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      setLocalizedData(data.body.localized_data);\n      setLDataIsLoaded(true);\n      return;\n    });\n  };\n\n  const sendAnnotationData = () => {\n    request.post(\"/api/sendAnnotationData\").send(localized_data).end((err, res) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(res.body.res);\n      return;\n    });\n  };\n\n  const updateLocalizedPos = e => {\n    const temp = localized_data.slice(0);\n    const idx = ldata_is_selected + 1;\n    temp[idx][2] = String(e.target.x() * (img_data.music.t_max / 992));\n    temp[idx][4] = String(-((e.target.y() + 10) / (740 / 2)) * 360 + 180);\n    setLocalizedData(temp);\n  };\n\n  const playWav = idx => {\n    // ローカルファイル再生不可能問題のため未実装\n    console.log(\"play sep_\" + String(idx) + \".vaw.\");\n  };\n\n  const button_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getLocalizedData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, \"load Localized data\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => sendAnnotationData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, \"save\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => {\n          setDataIsLoaded(false);\n          setLDataIsLoaded(false);\n          setLDataIsSelected(-1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"resrt data\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => getSpectrumImg(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, \"load Spectrum\"));\n    }\n  };\n\n  const stage_area = () => {\n    if (data_ia_loaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stage_area\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, \"Specgram\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(URLImage //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/specgram.png\"\n      , {\n        url: img_data.specgram.img_path,\n        scaleX: 1,\n        scaleY: 0.5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Text, {\n        text: \"specgram\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Stage2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, \"Music\"), /*#__PURE__*/React.createElement(Stage, {\n        width: window.innerWidth,\n        height: window.innerHeight / 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Layer, {\n        onWheel: e => console.log(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(URLImage //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/music.png\"\n      , {\n        url: img_data.music.img_path,\n        scaleX: 1,\n        scaleY: 0.5,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Text, {\n        text: \"music\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }), localized_data.slice(1).map(ld => {\n        return /*#__PURE__*/React.createElement(Rect, {\n          x: parseFloat(ld[2]) / img_data.music.t_max * 992,\n          y: (-parseFloat(ld[4]) + 180) / 360 * (740 / 2) - 10,\n          draggable: true,\n          width: parseFloat(ld[3]) / img_data.music.t_max * 992,\n          height: 20,\n          fill: \"red\",\n          stroke: \"black\",\n          strokeWidth: 2,\n          onClick: () => setLDataIsSelected(parseInt(ld[0])),\n          onDragStart: () => setLDataIsSelected(parseInt(ld[0])),\n          onDragEnd: e => updateLocalizedPos(e),\n          onDblClick: () => playWav(parseInt(ld[0])),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 19\n          }\n        });\n      })))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 14\n        }\n      }, \" Please date load. \");\n    }\n  };\n\n  const localized_data_area = () => {\n    if (ldata_ia_loaded && ldata_is_selected >= 0) {\n      return /*#__PURE__*/React.createElement(\"dev\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, localized_data.slice(1)[ldata_is_selected].map(d => {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 20\n          }\n        }, d);\n      }));\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, button_area(), stage_area(), localized_data_area());\n};\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/yamat/Workspace/hark_bird_app/src/components/Main.js"],"names":["React","useState","useEffect","createContext","useContext","Konva","useImage","Stage","Layer","Star","Rect","Text","Image","request","UserCount","Reset","URLImage","props","image","url","scaleX","scaleY","Main","count","setCount","img_data","setImgData","localized_data","setLocalizedData","data_ia_loaded","setDataIsLoaded","ldata_ia_loaded","setLDataIsLoaded","ldata_is_selected","setLDataIsSelected","getSpectrumImg","get","end","err","data","console","error","body","getLocalizedData","sendAnnotationData","post","send","res","log","updateLocalizedPos","e","temp","slice","idx","String","target","x","music","t_max","y","playWav","button_area","stage_area","window","innerWidth","innerHeight","specgram","img_path","map","ld","parseFloat","parseInt","localized_data_area","d"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react'\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\nimport { Stage, Layer, Star, Rect, Text, Image } from 'react-konva';\r\nimport request from \"superagent\";\r\nimport { UserCount } from '../App';\r\nimport Reset from './Reset';\r\n\r\n\r\nconst URLImage = (props) => {\r\n  const [image] = useImage(props.url);\r\n  return <Image\r\n    image={image}\r\n    scaleX={props.scaleX}\r\n    scaleY={props.scaleY}\r\n  />;\r\n};\r\n\r\n\r\nconst Main = () => {\r\n  const [count, setCount] = useContext(UserCount);\r\n  const [img_data, setImgData] = useState(null);\r\n  const [localized_data, setLocalizedData] = useState([]);\r\n  const [data_ia_loaded, setDataIsLoaded] = useState(false);\r\n  const [ldata_ia_loaded, setLDataIsLoaded] = useState(false);\r\n  const [ldata_is_selected, setLDataIsSelected] = useState(-1);\r\n\r\n  const getSpectrumImg = () => {\r\n    request\r\n      .get(\"/api/getSpectrumImg\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setImgData(data.body);\r\n          setDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const getLocalizedData = () => {\r\n    request\r\n      .get(\"/api/getLocalizedData\")\r\n      .end((err, data) => {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n          setLocalizedData(data.body.localized_data);\r\n          setLDataIsLoaded(true);\r\n          return;\r\n      });\r\n  };\r\n\r\n  const sendAnnotationData = () => {\r\n    request\r\n    .post(\"/api/sendAnnotationData\")\r\n    .send(localized_data)\r\n    .end((err, res) => {\r\n      if (err) {\r\n        console.error(err);\r\n        return;\r\n      }\r\n        console.log(res.body.res);\r\n        return;\r\n    });\r\n  };\r\n\r\n  const updateLocalizedPos = (e) => {\r\n    const temp = localized_data.slice(0);\r\n    const idx = ldata_is_selected + 1;\r\n    \r\n    temp[idx][2] = String(e.target.x() * (img_data.music.t_max / 992));\r\n    temp[idx][4] = String(-(((e.target.y() + 10) / (740 / 2))) * 360 + 180);\r\n    setLocalizedData(temp);\r\n  };\r\n\r\n  const playWav = (idx) => {\r\n    // ローカルファイル再生不可能問題のため未実装\r\n    console.log(\"play sep_\"+String(idx)+\".vaw.\");\r\n  };\r\n\r\n  const button_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n          <button onClick={() => getLocalizedData()}>\r\n            load Localized data\r\n          </button>\r\n          <button onClick={() => sendAnnotationData()}>\r\n            save\r\n          </button>\r\n          <button onClick={() => {setDataIsLoaded(false); setLDataIsLoaded(false); setLDataIsSelected(-1);}}>\r\n            resrt data\r\n          </button>\r\n      </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"button_area\">\r\n          <button onClick={() => getSpectrumImg()}>\r\n            load Spectrum\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const stage_area = () => {\r\n    if (data_ia_loaded) {\r\n      return (\r\n        <div className=\"stage_area\">\r\n          <div className=\"Stage1\">\r\n            <p>Specgram</p>\r\n            <Stage width={window.innerWidth} height={window.innerHeight/4}>\r\n              <Layer>\r\n                <URLImage\r\n                  //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/specgram.png\"\r\n                  url={img_data.specgram.img_path}\r\n                  scaleX={1}\r\n                  scaleY={0.5}\r\n                />\r\n                <Text text=\"specgram\" />\r\n              </Layer>\r\n            </Stage>\r\n          </div>\r\n          <div className=\"Stage2\">\r\n          <p>Music</p>\r\n          <Stage width={window.innerWidth} height={window.innerHeight/4}>\r\n            <Layer\r\n              onWheel={e => console.log(e)}\r\n            >\r\n              <URLImage\r\n                //url=\"https://raw.githubusercontent.com/yamatakeru/image_src/master/music.png\"\r\n                url={img_data.music.img_path}\r\n                scaleX={1}\r\n                scaleY={0.5}\r\n              />\r\n              <Text text=\"music\" />\r\n              {localized_data.slice(1).map(ld => {\r\n                return (\r\n                  <Rect\r\n                    x={(parseFloat(ld[2]) / img_data.music.t_max) * 992}\r\n                    y={((-parseFloat(ld[4]) + 180) / 360) * (740 / 2) - 10}\r\n                    draggable\r\n                    width={(parseFloat(ld[3]) / img_data.music.t_max) * 992}\r\n                    height={20}\r\n                    fill=\"red\"\r\n                    stroke='black'\r\n                    strokeWidth={2}\r\n                    onClick={() => setLDataIsSelected(parseInt(ld[0]))}\r\n                    onDragStart={() => setLDataIsSelected(parseInt(ld[0]))}\r\n                    onDragEnd={e =>updateLocalizedPos(e)}\r\n                    onDblClick={() => playWav(parseInt(ld[0]))}\r\n                  />\r\n                )})\r\n              }\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n      );\r\n    } else {\r\n      return <p> Please date load. </p>;\r\n    }\r\n  };\r\n\r\n  const localized_data_area = () => {\r\n    if (ldata_ia_loaded && ldata_is_selected >= 0) {\r\n      return (\r\n        <dev>\r\n          {localized_data.slice(1)[ldata_is_selected].map(d => {\r\n            return <ul>{d}</ul>\r\n            })\r\n          }\r\n        </dev>\r\n      );\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      {button_area()}\r\n      {stage_area()}\r\n      {localized_data_area()}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}